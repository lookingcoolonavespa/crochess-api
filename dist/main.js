/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["croChess"] = factory();
	else
		root["croChess"] = factory();
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Castle.ts":
/*!***********************!*\
  !*** ./src/Castle.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Castle)\n/* harmony export */ });\nfunction Castle(whiteKingside, whiteQueenside, blackKingside, blackQueenside) {\n  return {\n    white: {\n      kingside: whiteKingside,\n      queenside: whiteQueenside\n    },\n    black: {\n      kingside: blackKingside,\n      queenside: blackQueenside\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvQ2FzdGxlLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFFYyxTQUFVQSxNQUFWLENBQ1pDLGFBRFksRUFFWkMsY0FGWSxFQUdaQyxhQUhZLEVBSVpDLGNBSlksRUFJVztBQUV2QixTQUFPO0FBQ0xDLFNBQUssRUFBRTtBQUNMQyxjQUFRLEVBQUVMLGFBREw7QUFFTE0sZUFBUyxFQUFFTDtBQUZOLEtBREY7QUFLTE0sU0FBSyxFQUFFO0FBQ0xGLGNBQVEsRUFBRUgsYUFETDtBQUVMSSxlQUFTLEVBQUVIO0FBRk47QUFMRixHQUFQO0FBVUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcm9DaGVzcy8uL3NyYy9DYXN0bGUudHM/MWNlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYXN0bGVPYmogfSBmcm9tICcuL3R5cGVzL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDYXN0bGUoXG4gIHdoaXRlS2luZ3NpZGU6IGJvb2xlYW4sXG4gIHdoaXRlUXVlZW5zaWRlOiBib29sZWFuLFxuICBibGFja0tpbmdzaWRlOiBib29sZWFuLFxuICBibGFja1F1ZWVuc2lkZTogYm9vbGVhblxuKTogQ2FzdGxlT2JqIHtcbiAgcmV0dXJuIHtcbiAgICB3aGl0ZToge1xuICAgICAga2luZ3NpZGU6IHdoaXRlS2luZ3NpZGUsXG4gICAgICBxdWVlbnNpZGU6IHdoaXRlUXVlZW5zaWRlXG4gICAgfSxcbiAgICBibGFjazoge1xuICAgICAga2luZ3NpZGU6IGJsYWNrS2luZ3NpZGUsXG4gICAgICBxdWVlbnNpZGU6IGJsYWNrUXVlZW5zaWRlXG4gICAgfVxuICB9O1xufVxuIl0sIm5hbWVzIjpbIkNhc3RsZSIsIndoaXRlS2luZ3NpZGUiLCJ3aGl0ZVF1ZWVuc2lkZSIsImJsYWNrS2luZ3NpZGUiLCJibGFja1F1ZWVuc2lkZSIsIndoaXRlIiwia2luZ3NpZGUiLCJxdWVlbnNpZGUiLCJibGFjayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Castle.ts\n");

/***/ }),

/***/ "./src/Gameboard.ts":
/*!**************************!*\
  !*** ./src/Gameboard.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_moves__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/moves */ \"./src/utils/moves.ts\");\n/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/helpers */ \"./src/utils/helpers.ts\");\n/* harmony import */ var _ranksAndFiles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ranksAndFiles */ \"./src/ranksAndFiles.ts\");\n/* harmony import */ var _Castle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Castle */ \"./src/Castle.ts\");\n\n\n\n\n\nfunction createBoard() {\n  return _ranksAndFiles__WEBPACK_IMPORTED_MODULE_2__.files.reduce((acc, file) => {\n    _ranksAndFiles__WEBPACK_IMPORTED_MODULE_2__.ranks.forEach(rank => {\n      const square = file.concat(rank.toString());\n      acc.set(square, {\n        piece: null\n      });\n    });\n    return acc;\n  }, new Map());\n}\n\nconst Gameboard = (board = createBoard(), squaresGivingCheck, CastleRights) => {\n  function makeMove(s1, s2, promote) {\n    const piece = at(s1).piece;\n    if (!piece) return;\n    if (!validate.move(s1, s1)) return;\n\n    switch (piece.type) {\n      case 'pawn':\n        {\n          // promotion stuff\n          if (promote) {\n            if (!validate.promotion(s1, s2)) return;\n            from(s1).to(s2);\n            at(s2).promote(promote);\n          }\n\n          if (enPassant.checkToggle(s1, s2)) {\n            enPassant.toggle(s2);\n          }\n\n          from(s1).to(s2);\n          break;\n        }\n\n      case 'king':\n        {\n          // check if move is castle\n          let castleSide = '';\n          const castleSquares = get.castleSquares(piece.color);\n\n          for (const [side, squares] of Object.entries(castleSquares)) {\n            if (squares[1] === s2) castleSide = side;\n          }\n\n          if (castleSide) castling.castle(piece.color, castleSide);else from(s1).to(s2);\n          break;\n        }\n\n      default:\n        from(s1).to(s2);\n    }\n\n    enPassant.remove();\n    return board;\n  }\n\n  const castling = {\n    canCastle: (color, side) => {\n      if (_Castle__WEBPACK_IMPORTED_MODULE_3__[\"default\"] && !_Castle__WEBPACK_IMPORTED_MODULE_3__[\"default\"][color][side]) return false; // check if rook still exists\n\n      if (!checkIfRookExists()) return false;\n      const oppColor = color === 'white' ? 'black' : 'white';\n      const oppMoves = (0,_utils_moves__WEBPACK_IMPORTED_MODULE_0__.getAttackingMovesForColor)(oppColor, board);\n      const castleSquares = get.castleSquares(color)[side];\n\n      for (const square of castleSquares) {\n        // check if castle square is cleared\n        if (at(square).piece) return false; // make sure castle square isnt attacked\n\n        if (oppMoves.includes(square)) return false;\n      }\n\n      return true;\n\n      function checkIfRookExists() {\n        let rookExists = false;\n        const rank = color === 'white' ? 1 : 8;\n        const loopStart = side === 'queenside' ? _ranksAndFiles__WEBPACK_IMPORTED_MODULE_2__.files.indexOf('a') : _ranksAndFiles__WEBPACK_IMPORTED_MODULE_2__.files.indexOf('d');\n        const loopEnd = side === 'queenside' ? _ranksAndFiles__WEBPACK_IMPORTED_MODULE_2__.files.indexOf('e') : _ranksAndFiles__WEBPACK_IMPORTED_MODULE_2__.files.indexOf('h');\n\n        for (let i = loopStart; i <= loopEnd; i++) {\n          const square = _ranksAndFiles__WEBPACK_IMPORTED_MODULE_2__.files[i] + rank;\n          const piece = at(square).piece;\n          if (!piece) continue;\n          if (piece.type === 'rook') rookExists = true;\n        }\n\n        return rookExists;\n      }\n    },\n    castle: (color, side) => {\n      const castleSquares = get.castleSquares(color)[side];\n      const kingPos = get.kingPosition(color);\n      const rookPos = getRookPos();\n      from(rookPos).to(castleSquares[0]);\n      from(kingPos).to(castleSquares[1]);\n\n      function getRookPos() {\n        const pieceMap = get.pieceMap();\n        const rookPos = pieceMap[color].rook.find(square => {\n          const file = square.split('')[0];\n          return side === 'kingside' ? _ranksAndFiles__WEBPACK_IMPORTED_MODULE_2__.files.indexOf(file) > 3 : _ranksAndFiles__WEBPACK_IMPORTED_MODULE_2__.files.indexOf(file) < 3;\n        });\n        return rookPos;\n      } // need to get king position\n      // need to get castle squares\n      // need to find rook\n\n    },\n    getRightsAfterMove: square => {\n      const piece = at(square).piece;\n      const castleRights = CastleRights || (0,_Castle__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(true, true, true, true);\n\n      if (castleRights[piece.color].kingside || castleRights[piece.color].queenside) {\n        // check if i need to change castling rights\n        if (piece.type === 'king') {\n          castleRights[piece.color].kingside = false;\n          castleRights[piece.color].queenside = false;\n        }\n\n        if (piece.type === 'rook') {\n          // need to find if it is kingside or queenside rook\n          const [file] = square.split('');\n          const kingside = _ranksAndFiles__WEBPACK_IMPORTED_MODULE_2__.files.indexOf(file) > 3;\n          if (kingside) castleRights[piece.color].kingside = false;else castleRights[piece.color].queenside = false;\n        }\n      }\n\n      return castleRights;\n    }\n  };\n\n  const enPassant = (() => {\n    function getSquare(current, color) {\n      const {\n        x,\n        y\n      } = (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_1__.toXY)(current);\n      const newY = color === 'white' ? y - 1 : y + 1;\n      return (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_1__.fromXY)({\n        x,\n        y: newY\n      });\n    }\n\n    return {\n      checkToggle: (from, to) => {\n        const {\n          y: y1\n        } = (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_1__.toXY)(from);\n        const {\n          y: y2\n        } = (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_1__.toXY)(to);\n        return Math.abs(y1 - y2) === 2;\n      },\n      toggle: current => {\n        const {\n          color\n        } = at(current).piece;\n        const enPassantSquare = getSquare(current, color);\n        at(enPassantSquare).setEnPassant(color, current);\n      },\n      remove: () => {\n        for (const squareObj of board.values()) {\n          if (squareObj.enPassant) return squareObj.enPassant = undefined;\n        }\n      }\n    };\n  })();\n\n  const at = square => ({\n    place: piece => {\n      if (!board.get(square)) return;\n      board.set(square, {\n        piece\n      });\n    },\n    remove: () => {\n      if (!board.get(square)) return;\n      board.set(square, {\n        piece: null\n      });\n    },\n    promote: pieceType => {\n      const squareVal = board.get(square);\n      const piece = squareVal === null || squareVal === void 0 ? void 0 : squareVal.piece;\n      if (!piece) return;\n      board.set(square, Object.assign(Object.assign({}, squareVal), {\n        piece: Object.assign(Object.assign({}, piece), {\n          type: pieceType\n        })\n      }));\n    },\n    setEnPassant: (color, current) => {\n      if (!board.get(square)) return;\n      board.set(square, {\n        piece: null,\n        enPassant: {\n          current\n          /* square pawn is on */\n          ,\n          color: color\n        }\n      });\n    },\n\n    get piece() {\n      var _a;\n\n      return (_a = board.get(square)) === null || _a === void 0 ? void 0 : _a.piece;\n    },\n\n    getLegalMoves: () => {\n      squaresGivingCheck = squaresGivingCheck || [];\n      const {\n        type,\n        color\n      } = at(square).piece;\n\n      switch (squaresGivingCheck.length) {\n        case 2:\n          {\n            if (type !== 'king') return [];\n            return (0,_utils_moves__WEBPACK_IMPORTED_MODULE_0__.getLegalMoves)(square, board);\n          }\n\n        case 1:\n          {\n            return (0,_utils_moves__WEBPACK_IMPORTED_MODULE_0__.getLegalMovesInCheck)(origin, board, get.kingPosition(color), squaresGivingCheck[0]);\n          }\n\n        default:\n          {\n            if (type === 'king') {\n              let legalMoves = (0,_utils_moves__WEBPACK_IMPORTED_MODULE_0__.getLegalMoves)(square, board);\n              if (castling.canCastle(color, 'kingside')) legalMoves = [...legalMoves, ...get.castleSquares(color).kingside];\n              if (castling.canCastle(color, 'queenside')) legalMoves = [...legalMoves, ...get.castleSquares(color).queenside];\n              return legalMoves;\n            } else return (0,_utils_moves__WEBPACK_IMPORTED_MODULE_0__.getLegalMoves)(square, board);\n          }\n      }\n    }\n  });\n\n  const from = s1 => ({\n    to: s2 => {\n      const piece = at(s1).piece;\n      if (!piece) return; // move piece\n\n      at(s1).remove();\n      at(s2).place(piece);\n    }\n  });\n\n  const get = {\n    kingPosition: color => {\n      for (const [square, value] of board.entries()) {\n        if (value.piece && value.piece.type === 'king' && value.piece.color === color) return square;\n      }\n    },\n    pieceMap: () => {\n      const pieceMap = {\n        white: {},\n        black: {}\n      };\n\n      for (const [square, value] of board.entries()) {\n        const {\n          piece\n        } = value;\n        if (!piece) continue;\n        const {\n          type,\n          color\n        } = piece;\n        pieceMap[color][type] = pieceMap[color][type] ? [...pieceMap[color][type], square] : [square];\n      }\n\n      return pieceMap;\n    },\n    squaresGivingCheckAfterMove: (from, end) => {\n      var _a;\n\n      const squaresGivingCheck = [];\n      const piece = (_a = board.get(end)) === null || _a === void 0 ? void 0 : _a.piece;\n      const oppColor = piece.color === 'white' ? 'black' : 'white';\n      const kingPosition = get.kingPosition(oppColor);\n      const pieceHitsKing = (0,_utils_moves__WEBPACK_IMPORTED_MODULE_0__.getLegalMoves)(end, board).includes(kingPosition);\n      if (pieceHitsKing) squaresGivingCheck.push(end);\n      const discoveredCheck = (0,_utils_moves__WEBPACK_IMPORTED_MODULE_0__.getDiscoveredCheck)(kingPosition, oppColor, from, board);\n      if (discoveredCheck) squaresGivingCheck.push(discoveredCheck);\n      return squaresGivingCheck;\n    },\n    isCheckmate: (color, squaresGivingCheck) => {\n      const kingPos = get.kingPosition(color);\n      const legalMoves = at(kingPos).getLegalMoves(); // check if check can be blocked\n\n      if (squaresGivingCheck.length === 1) {\n        if ((0,_utils_moves__WEBPACK_IMPORTED_MODULE_0__.canBlockOrCaptureCheck)(kingPos, squaresGivingCheck[0], board)) return false;\n      }\n\n      if (!legalMoves || !legalMoves.length) return true;\n      return false;\n    },\n\n    castleSquares(color) {\n      const rank = color === 'white' ? 1 : 8;\n      return {\n        kingside: [`f${rank}`, `g${rank}`],\n        queenside: [`d${rank}`, `c${rank}`]\n      };\n    }\n\n  };\n  const validate = {\n    move: (from, to) => {\n      const piece = at(from).piece;\n      if (!piece) return false;\n      if (!at(from).getLegalMoves().includes(to)) return false;\n      return true;\n    },\n    promotion: (from, to) => {\n      const piece = at(from).piece;\n      if ((piece === null || piece === void 0 ? void 0 : piece.type) !== 'pawn') return false;\n      const endOfBoard = piece.color === 'white' ? 8 : 1;\n      const [, rank] = to.split('');\n      if (+rank === endOfBoard) return true;\n      return false;\n    }\n  };\n  return {\n    createBoard,\n    castling,\n    enPassant,\n    at,\n    from,\n    get,\n    validate,\n    makeMove,\n\n    get board() {\n      return board;\n    }\n\n  };\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Gameboard);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Gameboard.ts\n");

/***/ }),

/***/ "./src/History.ts":
/*!************************!*\
  !*** ./src/History.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ History)\n/* harmony export */ });\n/* harmony import */ var _utils_moves__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/moves */ \"./src/utils/moves.ts\");\n// should output history object that holds move history in 2d array\n// for each move needs to attach piece Type to beginning of move if not pawn\n// should further specify square of piece if, say both rooks, can move to same square\n\nfunction History(prevHistory, board, pieceMap) {\n  const history = prevHistory || [];\n  const get = {\n    piecePrefix: (from, to) => {\n      var _a;\n\n      const {\n        type,\n        color\n      } = (_a = board.get(to)) === null || _a === void 0 ? void 0 : _a.piece;\n\n      switch (type) {\n        case 'pawn':\n          return '';\n\n        case 'knight':\n        case 'rook':\n          {\n            let prefix = type === 'rook' ? 'R' : 'N';\n\n            if (pieceMap[color][type].length !== 1) {\n              // look for piece of same type that couldve also went to the square\n              pieceMap[color][type].forEach(s => {\n                if (s === to) return;\n                const boardCopy = new Map(board);\n                boardCopy.set(to, {\n                  piece: null\n                });\n\n                if ((0,_utils_moves__WEBPACK_IMPORTED_MODULE_0__.getLegalMoves)(s, boardCopy).includes(to)) {\n                  const [x1, y1] = from.split('');\n                  const [x2] = s.split('');\n                  const sameFile = x1 === x2;\n                  prefix = sameFile ? prefix + y1 : prefix + x1;\n                }\n              });\n            }\n\n            return prefix;\n          }\n\n        default:\n          {\n            const prefix = type.charAt(0).toUpperCase();\n            return prefix;\n          }\n      }\n    },\n    castleNotation: side => {\n      return side === 'kingside' ? 'O-O' : 'O-O-O';\n    }\n  };\n  const affix = {\n    capture: (move, prefix) => {\n      return `${prefix}x${move}`;\n    },\n    promote: (move, pieceType) => {\n      const suffix = pieceType === 'knight' ? 'N' : pieceType.charAt(0).toUpperCase();\n      return `${move}=${suffix}`;\n    },\n    check: notation => {\n      return `${notation}+`;\n    },\n    checkmate: notation => {\n      return `${notation}#`;\n    }\n  };\n  return {\n    get,\n    affix,\n    insertMove: notation => {\n      const lastMovePair = history[history.length - 1];\n\n      if (lastMovePair.length === 1) {\n        lastMovePair.push(notation);\n      } else {\n        const newMovePair = [notation];\n        history.push(newMovePair);\n      }\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUM5QixhQUFPLEdBQUdBLFFBQVEsR0FBbEI7QUFDRDtBQWZXLEdBQWQ7QUFrQkEsU0FBTztBQUNMaEMsT0FESztBQUVMeUIsU0FGSztBQUdMUyxjQUFVLEVBQUdGLFFBQUQsSUFBcUI7QUFDL0IsWUFBTUcsWUFBWSxHQUFHcEMsT0FBTyxDQUFDQSxPQUFPLENBQUNVLE1BQVIsR0FBaUIsQ0FBbEIsQ0FBNUI7O0FBQ0EsVUFBSTBCLFlBQVksQ0FBQzFCLE1BQWIsS0FBd0IsQ0FBNUIsRUFBK0I7QUFDN0IwQixvQkFBWSxDQUFDQyxJQUFiLENBQWtCSixRQUFsQjtBQUNELE9BRkQsTUFFTztBQUNMLGNBQU1LLFdBQVcsR0FBRyxDQUFDTCxRQUFELENBQXBCO0FBQ0FqQyxlQUFPLENBQUNxQyxJQUFSLENBQWFDLFdBQWI7QUFDRDtBQUNGO0FBWEksR0FBUDtBQWFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JvQ2hlc3MvLi9zcmMvSGlzdG9yeS50cz80YzIxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNob3VsZCBvdXRwdXQgaGlzdG9yeSBvYmplY3QgdGhhdCBob2xkcyBtb3ZlIGhpc3RvcnkgaW4gMmQgYXJyYXlcbi8vIGZvciBlYWNoIG1vdmUgbmVlZHMgdG8gYXR0YWNoIHBpZWNlIFR5cGUgdG8gYmVnaW5uaW5nIG9mIG1vdmUgaWYgbm90IHBhd25cbi8vIHNob3VsZCBmdXJ0aGVyIHNwZWNpZnkgc3F1YXJlIG9mIHBpZWNlIGlmLCBzYXkgYm90aCByb29rcywgY2FuIG1vdmUgdG8gc2FtZSBzcXVhcmVcblxuaW1wb3J0IHsgQWxsUGllY2VNYXAsIEhpc3RvcnlPYmosIFBpZWNlT2JqIH0gZnJvbSAnLi90eXBlcy9pbnRlcmZhY2VzJztcbmltcG9ydCB7IEJvYXJkLCBQaWVjZVR5cGUsIFNxdWFyZSB9IGZyb20gJy4vdHlwZXMvdHlwZXMnO1xuaW1wb3J0IHsgZ2V0TGVnYWxNb3ZlcyB9IGZyb20gJy4vdXRpbHMvbW92ZXMnO1xuXG50eXBlIEhpc3RvcnlUeXBlID0gU3F1YXJlW11bXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSGlzdG9yeShcbiAgcHJldkhpc3Rvcnk6IEhpc3RvcnlUeXBlLFxuICBib2FyZDogQm9hcmQsXG4gIHBpZWNlTWFwOiBBbGxQaWVjZU1hcFxuKTogSGlzdG9yeU9iaiB7XG4gIGNvbnN0IGhpc3Rvcnk6IEhpc3RvcnlUeXBlID0gcHJldkhpc3RvcnkgfHwgW107XG5cbiAgY29uc3QgZ2V0ID0ge1xuICAgIHBpZWNlUHJlZml4OiAoZnJvbTogU3F1YXJlLCB0bzogU3F1YXJlKSA9PiB7XG4gICAgICBjb25zdCB7IHR5cGUsIGNvbG9yIH0gPSBib2FyZC5nZXQodG8pPy5waWVjZSBhcyBQaWVjZU9iajtcblxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ3Bhd24nOlxuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgY2FzZSAna25pZ2h0JzpcbiAgICAgICAgY2FzZSAncm9vayc6IHtcbiAgICAgICAgICBsZXQgcHJlZml4ID0gdHlwZSA9PT0gJ3Jvb2snID8gJ1InIDogJ04nO1xuICAgICAgICAgIGlmIChwaWVjZU1hcFtjb2xvcl1bdHlwZV0ubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICAvLyBsb29rIGZvciBwaWVjZSBvZiBzYW1lIHR5cGUgdGhhdCBjb3VsZHZlIGFsc28gd2VudCB0byB0aGUgc3F1YXJlXG4gICAgICAgICAgICBwaWVjZU1hcFtjb2xvcl1bdHlwZV0uZm9yRWFjaCgocykgPT4ge1xuICAgICAgICAgICAgICBpZiAocyA9PT0gdG8pIHJldHVybjtcblxuICAgICAgICAgICAgICBjb25zdCBib2FyZENvcHkgPSBuZXcgTWFwKGJvYXJkKTtcbiAgICAgICAgICAgICAgYm9hcmRDb3B5LnNldCh0bywgeyBwaWVjZTogbnVsbCB9KTtcblxuICAgICAgICAgICAgICBpZiAoZ2V0TGVnYWxNb3ZlcyhzLCBib2FyZENvcHkpLmluY2x1ZGVzKHRvKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IFt4MSwgeTFdID0gZnJvbS5zcGxpdCgnJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgW3gyXSA9IHMuc3BsaXQoJycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNhbWVGaWxlID0geDEgPT09IHgyO1xuXG4gICAgICAgICAgICAgICAgcHJlZml4ID0gc2FtZUZpbGUgPyBwcmVmaXggKyB5MSA6IHByZWZpeCArIHgxO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICBjb25zdCBwcmVmaXggPSB0eXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgIHJldHVybiBwcmVmaXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNhc3RsZU5vdGF0aW9uOiAoc2lkZTogJ2tpbmdzaWRlJyB8ICdxdWVlbnNpZGUnKSA9PiB7XG4gICAgICByZXR1cm4gc2lkZSA9PT0gJ2tpbmdzaWRlJyA/ICdPLU8nIDogJ08tTy1PJztcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgYWZmaXggPSB7XG4gICAgY2FwdHVyZTogKG1vdmU6IFNxdWFyZSwgcHJlZml4OiBzdHJpbmcpID0+IHtcbiAgICAgIHJldHVybiBgJHtwcmVmaXh9eCR7bW92ZX1gO1xuICAgIH0sXG4gICAgcHJvbW90ZTogKG1vdmU6IFNxdWFyZSwgcGllY2VUeXBlOiBQaWVjZVR5cGUpID0+IHtcbiAgICAgIGNvbnN0IHN1ZmZpeCA9XG4gICAgICAgIHBpZWNlVHlwZSA9PT0gJ2tuaWdodCcgPyAnTicgOiBwaWVjZVR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgIHJldHVybiBgJHttb3ZlfT0ke3N1ZmZpeH1gO1xuICAgIH0sXG4gICAgY2hlY2s6IChub3RhdGlvbjogc3RyaW5nKSA9PiB7XG4gICAgICByZXR1cm4gYCR7bm90YXRpb259K2A7XG4gICAgfSxcbiAgICBjaGVja21hdGU6IChub3RhdGlvbjogc3RyaW5nKSA9PiB7XG4gICAgICByZXR1cm4gYCR7bm90YXRpb259I2A7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgZ2V0LFxuICAgIGFmZml4LFxuICAgIGluc2VydE1vdmU6IChub3RhdGlvbjogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBsYXN0TW92ZVBhaXIgPSBoaXN0b3J5W2hpc3RvcnkubGVuZ3RoIC0gMV07XG4gICAgICBpZiAobGFzdE1vdmVQYWlyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBsYXN0TW92ZVBhaXIucHVzaChub3RhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBuZXdNb3ZlUGFpciA9IFtub3RhdGlvbl07XG4gICAgICAgIGhpc3RvcnkucHVzaChuZXdNb3ZlUGFpcik7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuIl0sIm5hbWVzIjpbImdldExlZ2FsTW92ZXMiLCJIaXN0b3J5IiwicHJldkhpc3RvcnkiLCJib2FyZCIsInBpZWNlTWFwIiwiaGlzdG9yeSIsImdldCIsInBpZWNlUHJlZml4IiwiZnJvbSIsInRvIiwidHlwZSIsImNvbG9yIiwiX2EiLCJwaWVjZSIsInByZWZpeCIsImxlbmd0aCIsImZvckVhY2giLCJzIiwiYm9hcmRDb3B5IiwiTWFwIiwic2V0IiwiaW5jbHVkZXMiLCJ4MSIsInkxIiwic3BsaXQiLCJ4MiIsInNhbWVGaWxlIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJjYXN0bGVOb3RhdGlvbiIsInNpZGUiLCJhZmZpeCIsImNhcHR1cmUiLCJtb3ZlIiwicHJvbW90ZSIsInBpZWNlVHlwZSIsInN1ZmZpeCIsImNoZWNrIiwibm90YXRpb24iLCJjaGVja21hdGUiLCJpbnNlcnRNb3ZlIiwibGFzdE1vdmVQYWlyIiwicHVzaCIsIm5ld01vdmVQYWlyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/History.ts\n");

/***/ }),

/***/ "./src/Piece.ts":
/*!**********************!*\
  !*** ./src/Piece.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_moves__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/moves */ \"./src/utils/moves.ts\");\n/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/helpers */ \"./src/utils/helpers.ts\");\n\n\n\nconst Piece = (color, type) => {\n  function hasMove(from, to) {\n    switch (type) {\n      case 'king':\n        {\n          const oneSquareVert = _utils_moves__WEBPACK_IMPORTED_MODULE_0__[\"default\"].yByN(1)(from)(to) && _utils_moves__WEBPACK_IMPORTED_MODULE_0__[\"default\"].xByN(0)(from)(to);\n          const oneSquareLateral = _utils_moves__WEBPACK_IMPORTED_MODULE_0__[\"default\"].xByN(1)(from)(to) && _utils_moves__WEBPACK_IMPORTED_MODULE_0__[\"default\"].yByN(0)(from)(to);\n          const oneSquareDiagonally = _utils_moves__WEBPACK_IMPORTED_MODULE_0__[\"default\"].yByN(1)(from)(to) && _utils_moves__WEBPACK_IMPORTED_MODULE_0__[\"default\"].xByN(1)(from)(to);\n          return from !== to && (oneSquareDiagonally || oneSquareVert || oneSquareLateral);\n        }\n\n      case 'queen':\n        {\n          return from !== to && (_utils_moves__WEBPACK_IMPORTED_MODULE_0__[\"default\"].diagonal(from)(to) || _utils_moves__WEBPACK_IMPORTED_MODULE_0__[\"default\"].vertAndLateral(from)(to));\n        }\n\n      case 'bishop':\n        {\n          return from !== to && _utils_moves__WEBPACK_IMPORTED_MODULE_0__[\"default\"].diagonal(from)(to);\n        }\n\n      case 'knight':\n        {\n          return from !== to && (_utils_moves__WEBPACK_IMPORTED_MODULE_0__[\"default\"].xByN(1)(from)(to) && _utils_moves__WEBPACK_IMPORTED_MODULE_0__[\"default\"].yByN(2)(from)(to) || _utils_moves__WEBPACK_IMPORTED_MODULE_0__[\"default\"].xByN(2)(from)(to) && _utils_moves__WEBPACK_IMPORTED_MODULE_0__[\"default\"].yByN(1)(from)(to));\n        }\n\n      case 'rook':\n        {\n          return from !== to && _utils_moves__WEBPACK_IMPORTED_MODULE_0__[\"default\"].vertAndLateral(to)(from);\n        }\n\n      case 'pawn':\n        {\n          const {\n            x: x1,\n            y: y1\n          } = (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_1__.toXY)(from);\n          const {\n            x: x2,\n            y: y2\n          } = (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_1__.toXY)(to);\n          const onlyMovesInFront = color === 'white' ? y1 < y2 : y1 > y2;\n          const regularMove = _utils_moves__WEBPACK_IMPORTED_MODULE_0__[\"default\"].yByN(1)(from)(to) && x1 === x2;\n          const firstMove = color === 'white' ? y1 === 2 : y1 === 7;\n          const jumpTwo = _utils_moves__WEBPACK_IMPORTED_MODULE_0__[\"default\"].yByN(2)(from)(to) && x1 === x2;\n          return from !== to && onlyMovesInFront && (regularMove || firstMove && jumpTwo);\n        }\n    }\n  }\n\n  function getPawnCaptures(origin) {\n    if (type !== 'pawn') return;\n    const {\n      x,\n      y\n    } = (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_1__.toXY)(origin);\n    const newY = color === 'white' ? y + 1 : y - 1;\n    const captureOne = {\n      x: x + 1,\n      y: newY\n    };\n    const captureTwo = {\n      x: x - 1,\n      y: newY\n    };\n    return [(0,_utils_helpers__WEBPACK_IMPORTED_MODULE_1__.fromXY)(captureOne), (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_1__.fromXY)(captureTwo)];\n  }\n\n  return {\n    hasMove,\n    getPawnCaptures,\n\n    get type() {\n      return type;\n    },\n\n    get color() {\n      return color;\n    }\n\n  };\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Piece);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FjLGdCQURBLEtBRUNDLFdBQVcsSUFBS0MsU0FBUyxJQUFJQyxPQUY5QixDQURGO0FBS0Q7QUFoREg7QUFrREQ7O0FBRUQsV0FBU0MsZUFBVCxDQUF5QkMsTUFBekIsRUFBdUM7QUFDckMsUUFBSXRCLElBQUksS0FBSyxNQUFiLEVBQXFCO0FBRXJCLFVBQU07QUFBRVcsT0FBRjtBQUFLRTtBQUFMLFFBQVdqQixvREFBSSxDQUFDMEIsTUFBRCxDQUFyQjtBQUVBLFVBQU1DLElBQUksR0FBR3hCLEtBQUssS0FBSyxPQUFWLEdBQW9CYyxDQUFDLEdBQUcsQ0FBeEIsR0FBNEJBLENBQUMsR0FBRyxDQUE3QztBQUVBLFVBQU1XLFVBQVUsR0FBRztBQUFFYixPQUFDLEVBQUVBLENBQUMsR0FBRyxDQUFUO0FBQVlFLE9BQUMsRUFBRVU7QUFBZixLQUFuQjtBQUNBLFVBQU1FLFVBQVUsR0FBRztBQUFFZCxPQUFDLEVBQUVBLENBQUMsR0FBRyxDQUFUO0FBQVlFLE9BQUMsRUFBRVU7QUFBZixLQUFuQjtBQUVBLFdBQU8sQ0FBQzFCLHNEQUFNLENBQUMyQixVQUFELENBQVAsRUFBcUIzQixzREFBTSxDQUFDNEIsVUFBRCxDQUEzQixDQUFQO0FBQ0Q7O0FBRUQsU0FBTztBQUNMeEIsV0FESztBQUVMb0IsbUJBRks7O0FBR0wsUUFBSXJCLElBQUosR0FBUTtBQUNOLGFBQU9BLElBQVA7QUFDRCxLQUxJOztBQU1MLFFBQUlELEtBQUosR0FBUztBQUNQLGFBQU9BLEtBQVA7QUFDRDs7QUFSSSxHQUFQO0FBVUQsQ0E3RUQ7O0FBK0VBLGlFQUFlRCxLQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JvQ2hlc3MvLi9zcmMvUGllY2UudHM/MmViOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW92ZXMgZnJvbSAnLi91dGlscy9tb3Zlcyc7XG5pbXBvcnQgeyB0b1hZLCBmcm9tWFkgfSBmcm9tICcuL3V0aWxzL2hlbHBlcnMnO1xuXG5pbXBvcnQgeyBDb2xvciwgU3F1YXJlLCBQaWVjZVR5cGUgfSBmcm9tICcuL3R5cGVzL3R5cGVzJztcblxuY29uc3QgUGllY2UgPSAoY29sb3I6IENvbG9yLCB0eXBlOiBQaWVjZVR5cGUpID0+IHtcbiAgZnVuY3Rpb24gaGFzTW92ZShmcm9tOiBTcXVhcmUsIHRvOiBTcXVhcmUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ2tpbmcnOiB7XG4gICAgICAgIGNvbnN0IG9uZVNxdWFyZVZlcnQgPVxuICAgICAgICAgIG1vdmVzLnlCeU4oMSkoZnJvbSkodG8pICYmIG1vdmVzLnhCeU4oMCkoZnJvbSkodG8pO1xuICAgICAgICBjb25zdCBvbmVTcXVhcmVMYXRlcmFsID1cbiAgICAgICAgICBtb3Zlcy54QnlOKDEpKGZyb20pKHRvKSAmJiBtb3Zlcy55QnlOKDApKGZyb20pKHRvKTtcbiAgICAgICAgY29uc3Qgb25lU3F1YXJlRGlhZ29uYWxseSA9XG4gICAgICAgICAgbW92ZXMueUJ5TigxKShmcm9tKSh0bykgJiYgbW92ZXMueEJ5TigxKShmcm9tKSh0byk7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBmcm9tICE9PSB0byAmJlxuICAgICAgICAgIChvbmVTcXVhcmVEaWFnb25hbGx5IHx8IG9uZVNxdWFyZVZlcnQgfHwgb25lU3F1YXJlTGF0ZXJhbClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3F1ZWVuJzoge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGZyb20gIT09IHRvICYmXG4gICAgICAgICAgKG1vdmVzLmRpYWdvbmFsKGZyb20pKHRvKSB8fCBtb3Zlcy52ZXJ0QW5kTGF0ZXJhbChmcm9tKSh0bykpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjYXNlICdiaXNob3AnOiB7XG4gICAgICAgIHJldHVybiBmcm9tICE9PSB0byAmJiBtb3Zlcy5kaWFnb25hbChmcm9tKSh0byk7XG4gICAgICB9XG4gICAgICBjYXNlICdrbmlnaHQnOiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgZnJvbSAhPT0gdG8gJiZcbiAgICAgICAgICAoKG1vdmVzLnhCeU4oMSkoZnJvbSkodG8pICYmIG1vdmVzLnlCeU4oMikoZnJvbSkodG8pKSB8fFxuICAgICAgICAgICAgKG1vdmVzLnhCeU4oMikoZnJvbSkodG8pICYmIG1vdmVzLnlCeU4oMSkoZnJvbSkodG8pKSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3Jvb2snOiB7XG4gICAgICAgIHJldHVybiBmcm9tICE9PSB0byAmJiBtb3Zlcy52ZXJ0QW5kTGF0ZXJhbCh0bykoZnJvbSk7XG4gICAgICB9XG4gICAgICBjYXNlICdwYXduJzoge1xuICAgICAgICBjb25zdCB7IHg6IHgxLCB5OiB5MSB9ID0gdG9YWShmcm9tKTtcbiAgICAgICAgY29uc3QgeyB4OiB4MiwgeTogeTIgfSA9IHRvWFkodG8pO1xuXG4gICAgICAgIGNvbnN0IG9ubHlNb3Zlc0luRnJvbnQgPSBjb2xvciA9PT0gJ3doaXRlJyA/IHkxIDwgeTIgOiB5MSA+IHkyO1xuICAgICAgICBjb25zdCByZWd1bGFyTW92ZSA9IG1vdmVzLnlCeU4oMSkoZnJvbSkodG8pICYmIHgxID09PSB4MjtcblxuICAgICAgICBjb25zdCBmaXJzdE1vdmUgPSBjb2xvciA9PT0gJ3doaXRlJyA/IHkxID09PSAyIDogeTEgPT09IDc7XG4gICAgICAgIGNvbnN0IGp1bXBUd28gPSBtb3Zlcy55QnlOKDIpKGZyb20pKHRvKSAmJiB4MSA9PT0geDI7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBmcm9tICE9PSB0byAmJlxuICAgICAgICAgIG9ubHlNb3Zlc0luRnJvbnQgJiZcbiAgICAgICAgICAocmVndWxhck1vdmUgfHwgKGZpcnN0TW92ZSAmJiBqdW1wVHdvKSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQYXduQ2FwdHVyZXMob3JpZ2luOiBTcXVhcmUpIHtcbiAgICBpZiAodHlwZSAhPT0gJ3Bhd24nKSByZXR1cm47XG5cbiAgICBjb25zdCB7IHgsIHkgfSA9IHRvWFkob3JpZ2luKTtcblxuICAgIGNvbnN0IG5ld1kgPSBjb2xvciA9PT0gJ3doaXRlJyA/IHkgKyAxIDogeSAtIDE7XG5cbiAgICBjb25zdCBjYXB0dXJlT25lID0geyB4OiB4ICsgMSwgeTogbmV3WSB9O1xuICAgIGNvbnN0IGNhcHR1cmVUd28gPSB7IHg6IHggLSAxLCB5OiBuZXdZIH07XG5cbiAgICByZXR1cm4gW2Zyb21YWShjYXB0dXJlT25lKSwgZnJvbVhZKGNhcHR1cmVUd28pXTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaGFzTW92ZSxcbiAgICBnZXRQYXduQ2FwdHVyZXMsXG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICB9LFxuICAgIGdldCBjb2xvcigpIHtcbiAgICAgIHJldHVybiBjb2xvcjtcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQaWVjZTtcbiJdLCJuYW1lcyI6WyJtb3ZlcyIsInRvWFkiLCJmcm9tWFkiLCJQaWVjZSIsImNvbG9yIiwidHlwZSIsImhhc01vdmUiLCJmcm9tIiwidG8iLCJvbmVTcXVhcmVWZXJ0IiwieUJ5TiIsInhCeU4iLCJvbmVTcXVhcmVMYXRlcmFsIiwib25lU3F1YXJlRGlhZ29uYWxseSIsImRpYWdvbmFsIiwidmVydEFuZExhdGVyYWwiLCJ4IiwieDEiLCJ5IiwieTEiLCJ4MiIsInkyIiwib25seU1vdmVzSW5Gcm9udCIsInJlZ3VsYXJNb3ZlIiwiZmlyc3RNb3ZlIiwianVtcFR3byIsImdldFBhd25DYXB0dXJlcyIsIm9yaWdpbiIsIm5ld1kiLCJjYXB0dXJlT25lIiwiY2FwdHVyZVR3byJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Piece.ts\n");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Gameboard\": () => (/* reexport safe */ _Gameboard__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   \"History\": () => (/* reexport safe */ _History__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   \"files\": () => (/* reexport safe */ _ranksAndFiles__WEBPACK_IMPORTED_MODULE_3__.files),\n/* harmony export */   \"ranks\": () => (/* reexport safe */ _ranksAndFiles__WEBPACK_IMPORTED_MODULE_3__.ranks),\n/* harmony export */   \"startingPositions\": () => (/* reexport module object */ _startingPositions__WEBPACK_IMPORTED_MODULE_2__)\n/* harmony export */ });\n/* harmony import */ var _Gameboard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Gameboard */ \"./src/Gameboard.ts\");\n/* harmony import */ var _History__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./History */ \"./src/History.ts\");\n/* harmony import */ var _startingPositions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./startingPositions */ \"./src/startingPositions.ts\");\n/* harmony import */ var _ranksAndFiles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ranksAndFiles */ \"./src/ranksAndFiles.ts\");\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nyb0NoZXNzLy4vc3JjL21haW4udHM/Y2Q0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR2FtZWJvYXJkIGZyb20gJy4vR2FtZWJvYXJkJztcbmltcG9ydCBIaXN0b3J5IGZyb20gJy4vSGlzdG9yeSc7XG5pbXBvcnQgKiBhcyBzdGFydGluZ1Bvc2l0aW9ucyBmcm9tICcuL3N0YXJ0aW5nUG9zaXRpb25zJztcbmltcG9ydCB7IHJhbmtzLCBmaWxlcyB9IGZyb20gJy4vcmFua3NBbmRGaWxlcyc7XG5cbmV4cG9ydCB7IEdhbWVib2FyZCwgSGlzdG9yeSwgc3RhcnRpbmdQb3NpdGlvbnMsIHJhbmtzLCBmaWxlcyB9O1xuIl0sIm5hbWVzIjpbIkdhbWVib2FyZCIsIkhpc3RvcnkiLCJzdGFydGluZ1Bvc2l0aW9ucyIsInJhbmtzIiwiZmlsZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main.ts\n");

/***/ }),

/***/ "./src/ranksAndFiles.ts":
/*!******************************!*\
  !*** ./src/ranksAndFiles.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"files\": () => (/* binding */ files),\n/* harmony export */   \"ranks\": () => (/* binding */ ranks)\n/* harmony export */ });\nconst files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\nconst ranks = [1, 2, 3, 4, 5, 6, 7, 8];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcmFua3NBbmRGaWxlcy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLE1BQU1BLEtBQUssR0FBRyxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixHQUFoQixFQUFxQixHQUFyQixFQUEwQixHQUExQixFQUErQixHQUEvQixFQUFvQyxHQUFwQyxDQUFkO0FBQ0EsTUFBTUMsS0FBSyxHQUFHLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixFQUFhLENBQWIsRUFBZ0IsQ0FBaEIsRUFBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsQ0FBZCIsInNvdXJjZXMiOlsid2VicGFjazovL2Nyb0NoZXNzLy4vc3JjL3JhbmtzQW5kRmlsZXMudHM/ZTYyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmaWxlcyA9IFsnYScsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnLCAnZycsICdoJ107XG5jb25zdCByYW5rcyA9IFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4XTtcblxuZXhwb3J0IHsgZmlsZXMsIHJhbmtzIH07XG4iXSwibmFtZXMiOlsiZmlsZXMiLCJyYW5rcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/ranksAndFiles.ts\n");

/***/ }),

/***/ "./src/startingPositions.ts":
/*!**********************************!*\
  !*** ./src/startingPositions.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"standard\": () => (/* binding */ standard)\n/* harmony export */ });\nconst standard = {\n  white: {\n    rook: ['a1', 'h1'],\n    knight: ['g1', 'b1'],\n    bishop: ['f1', 'c1'],\n    king: ['e1'],\n    queen: ['d1'],\n    pawn: ['a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2']\n  },\n  black: {\n    rook: ['a8', 'h8'],\n    knight: ['g8', 'b8'],\n    bishop: ['f8', 'c8'],\n    king: ['e8'],\n    queen: ['d8'],\n    pawn: ['a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7']\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RhcnRpbmdQb3NpdGlvbnMudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE1BQU1BLFFBQVEsR0FBZ0I7QUFDNUJDLE9BQUssRUFBRTtBQUNMQyxRQUFJLEVBQUUsQ0FBQyxJQUFELEVBQU8sSUFBUCxDQUREO0FBRUxDLFVBQU0sRUFBRSxDQUFDLElBQUQsRUFBTyxJQUFQLENBRkg7QUFHTEMsVUFBTSxFQUFFLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FISDtBQUlMQyxRQUFJLEVBQUUsQ0FBQyxJQUFELENBSkQ7QUFLTEMsU0FBSyxFQUFFLENBQUMsSUFBRCxDQUxGO0FBTUxDLFFBQUksRUFBRSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixFQUF5QixJQUF6QixFQUErQixJQUEvQixFQUFxQyxJQUFyQyxFQUEyQyxJQUEzQztBQU5ELEdBRHFCO0FBUzVCQyxPQUFLLEVBQUU7QUFDTE4sUUFBSSxFQUFFLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FERDtBQUVMQyxVQUFNLEVBQUUsQ0FBQyxJQUFELEVBQU8sSUFBUCxDQUZIO0FBR0xDLFVBQU0sRUFBRSxDQUFDLElBQUQsRUFBTyxJQUFQLENBSEg7QUFJTEMsUUFBSSxFQUFFLENBQUMsSUFBRCxDQUpEO0FBS0xDLFNBQUssRUFBRSxDQUFDLElBQUQsQ0FMRjtBQU1MQyxRQUFJLEVBQUUsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsRUFBbUIsSUFBbkIsRUFBeUIsSUFBekIsRUFBK0IsSUFBL0IsRUFBcUMsSUFBckMsRUFBMkMsSUFBM0M7QUFORDtBQVRxQixDQUE5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nyb0NoZXNzLy4vc3JjL3N0YXJ0aW5nUG9zaXRpb25zLnRzPzNiYmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWxsUGllY2VNYXAgfSBmcm9tICcuL3R5cGVzL2ludGVyZmFjZXMnO1xuXG5jb25zdCBzdGFuZGFyZDogQWxsUGllY2VNYXAgPSB7XG4gIHdoaXRlOiB7XG4gICAgcm9vazogWydhMScsICdoMSddLFxuICAgIGtuaWdodDogWydnMScsICdiMSddLFxuICAgIGJpc2hvcDogWydmMScsICdjMSddLFxuICAgIGtpbmc6IFsnZTEnXSxcbiAgICBxdWVlbjogWydkMSddLFxuICAgIHBhd246IFsnYTInLCAnYjInLCAnYzInLCAnZDInLCAnZTInLCAnZjInLCAnZzInLCAnaDInXVxuICB9LFxuICBibGFjazoge1xuICAgIHJvb2s6IFsnYTgnLCAnaDgnXSxcbiAgICBrbmlnaHQ6IFsnZzgnLCAnYjgnXSxcbiAgICBiaXNob3A6IFsnZjgnLCAnYzgnXSxcbiAgICBraW5nOiBbJ2U4J10sXG4gICAgcXVlZW46IFsnZDgnXSxcbiAgICBwYXduOiBbJ2E3JywgJ2I3JywgJ2M3JywgJ2Q3JywgJ2U3JywgJ2Y3JywgJ2c3JywgJ2g3J11cbiAgfVxufTtcblxuZXhwb3J0IHsgc3RhbmRhcmQgfTtcbiJdLCJuYW1lcyI6WyJzdGFuZGFyZCIsIndoaXRlIiwicm9vayIsImtuaWdodCIsImJpc2hvcCIsImtpbmciLCJxdWVlbiIsInBhd24iLCJibGFjayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/startingPositions.ts\n");

/***/ }),

/***/ "./src/utils/helpers.ts":
/*!******************************!*\
  !*** ./src/utils/helpers.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"calcDistance\": () => (/* binding */ calcDistance),\n/* harmony export */   \"fromXY\": () => (/* binding */ fromXY),\n/* harmony export */   \"toXY\": () => (/* binding */ toXY)\n/* harmony export */ });\nfunction toXY(square) {\n  const [x, y] = square.split('');\n  return {\n    x: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'].indexOf(x.toLowerCase()),\n    y: Number(y)\n  };\n}\n\nfunction fromXY(coord) {\n  const {\n    x,\n    y\n  } = coord;\n  const col = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'][x];\n  if (!col) return '';\n  return col.concat(y.toString());\n}\n\nconst calcDistance = squareOne => squareTwo => {\n  const {\n    x: x1,\n    y: y1\n  } = toXY(squareOne);\n  const {\n    x: x2,\n    y: y2\n  } = toXY(squareTwo);\n  const xDiff = x1 - x2;\n  const yDiff = y1 - y2;\n  return {\n    xDiff,\n    yDiff\n  };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvaGVscGVycy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFHQSxTQUFTQSxJQUFULENBQWNDLE1BQWQsRUFBNEI7QUFDMUIsUUFBTSxDQUFDQyxDQUFELEVBQUlDLENBQUosSUFBU0YsTUFBTSxDQUFDRyxLQUFQLENBQWEsRUFBYixDQUFmO0FBQ0EsU0FBTztBQUNMRixLQUFDLEVBQUUsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLEdBQVgsRUFBZ0IsR0FBaEIsRUFBcUIsR0FBckIsRUFBMEIsR0FBMUIsRUFBK0IsR0FBL0IsRUFBb0MsR0FBcEMsRUFBeUNHLE9BQXpDLENBQWlESCxDQUFDLENBQUNJLFdBQUYsRUFBakQsQ0FERTtBQUVMSCxLQUFDLEVBQUVJLE1BQU0sQ0FBQ0osQ0FBRDtBQUZKLEdBQVA7QUFJRDs7QUFFRCxTQUFTSyxNQUFULENBQWdCQyxLQUFoQixFQUE0QjtBQUMxQixRQUFNO0FBQUVQLEtBQUY7QUFBS0M7QUFBTCxNQUFXTSxLQUFqQjtBQUNBLFFBQU1DLEdBQUcsR0FBRyxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixHQUFoQixFQUFxQixHQUFyQixFQUEwQixHQUExQixFQUErQixHQUEvQixFQUFvQyxHQUFwQyxFQUF5Q1IsQ0FBekMsQ0FBWjtBQUNBLE1BQUksQ0FBQ1EsR0FBTCxFQUFVLE9BQU8sRUFBUDtBQUNWLFNBQU9BLEdBQUcsQ0FBQ0MsTUFBSixDQUFXUixDQUFDLENBQUNTLFFBQUYsRUFBWCxDQUFQO0FBQ0Q7O0FBRUQsTUFBTUMsWUFBWSxHQUFJQyxTQUFELElBQXdCQyxTQUFELElBQXNCO0FBQ2hFLFFBQU07QUFBRWIsS0FBQyxFQUFFYyxFQUFMO0FBQVNiLEtBQUMsRUFBRWM7QUFBWixNQUFtQmpCLElBQUksQ0FBQ2MsU0FBRCxDQUE3QjtBQUNBLFFBQU07QUFBRVosS0FBQyxFQUFFZ0IsRUFBTDtBQUFTZixLQUFDLEVBQUVnQjtBQUFaLE1BQW1CbkIsSUFBSSxDQUFDZSxTQUFELENBQTdCO0FBRUEsUUFBTUssS0FBSyxHQUFHSixFQUFFLEdBQUdFLEVBQW5CO0FBQ0EsUUFBTUcsS0FBSyxHQUFHSixFQUFFLEdBQUdFLEVBQW5CO0FBQ0EsU0FBTztBQUNMQyxTQURLO0FBRUxDO0FBRkssR0FBUDtBQUlELENBVkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcm9DaGVzcy8uL3NyYy91dGlscy9oZWxwZXJzLnRzPzI4ZjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29vcmQgfSBmcm9tICcuLi90eXBlcy9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFNxdWFyZSB9IGZyb20gJy4uL3R5cGVzL3R5cGVzJztcblxuZnVuY3Rpb24gdG9YWShzcXVhcmU6IFNxdWFyZSk6IENvb3JkIHtcbiAgY29uc3QgW3gsIHldID0gc3F1YXJlLnNwbGl0KCcnKTtcbiAgcmV0dXJuIHtcbiAgICB4OiBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZScsICdmJywgJ2cnLCAnaCddLmluZGV4T2YoeC50b0xvd2VyQ2FzZSgpKSxcbiAgICB5OiBOdW1iZXIoeSlcbiAgfTtcbn1cblxuZnVuY3Rpb24gZnJvbVhZKGNvb3JkOiBDb29yZCk6IFNxdWFyZSB7XG4gIGNvbnN0IHsgeCwgeSB9ID0gY29vcmQ7XG4gIGNvbnN0IGNvbCA9IFsnYScsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnLCAnZycsICdoJ11beF07XG4gIGlmICghY29sKSByZXR1cm4gJyc7XG4gIHJldHVybiBjb2wuY29uY2F0KHkudG9TdHJpbmcoKSk7XG59XG5cbmNvbnN0IGNhbGNEaXN0YW5jZSA9IChzcXVhcmVPbmU6IHN0cmluZykgPT4gKHNxdWFyZVR3bzogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHsgeDogeDEsIHk6IHkxIH0gPSB0b1hZKHNxdWFyZU9uZSk7XG4gIGNvbnN0IHsgeDogeDIsIHk6IHkyIH0gPSB0b1hZKHNxdWFyZVR3byk7XG5cbiAgY29uc3QgeERpZmYgPSB4MSAtIHgyO1xuICBjb25zdCB5RGlmZiA9IHkxIC0geTI7XG4gIHJldHVybiB7XG4gICAgeERpZmYsXG4gICAgeURpZmZcbiAgfTtcbn07XG5cbmV4cG9ydCB7IHRvWFksIGZyb21YWSwgY2FsY0Rpc3RhbmNlIH07XG4iXSwibmFtZXMiOlsidG9YWSIsInNxdWFyZSIsIngiLCJ5Iiwic3BsaXQiLCJpbmRleE9mIiwidG9Mb3dlckNhc2UiLCJOdW1iZXIiLCJmcm9tWFkiLCJjb29yZCIsImNvbCIsImNvbmNhdCIsInRvU3RyaW5nIiwiY2FsY0Rpc3RhbmNlIiwic3F1YXJlT25lIiwic3F1YXJlVHdvIiwieDEiLCJ5MSIsIngyIiwieTIiLCJ4RGlmZiIsInlEaWZmIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/helpers.ts\n");

/***/ }),

/***/ "./src/utils/moves.ts":
/*!****************************!*\
  !*** ./src/utils/moves.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"canBlockOrCaptureCheck\": () => (/* binding */ canBlockOrCaptureCheck),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"getAttackingMovesForColor\": () => (/* binding */ getAttackingMovesForColor),\n/* harmony export */   \"getDiscoveredCheck\": () => (/* binding */ getDiscoveredCheck),\n/* harmony export */   \"getLegalMoves\": () => (/* binding */ getLegalMoves),\n/* harmony export */   \"getLegalMovesInCheck\": () => (/* binding */ getLegalMovesInCheck)\n/* harmony export */ });\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ \"./src/utils/helpers.ts\");\n/* harmony import */ var _Piece__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Piece */ \"./src/Piece.ts\");\n\n\nconst moves = {\n  vertAndLateral: from => to => {\n    const [x1, y1] = from.split('');\n    const [x2, y2] = to.split('');\n    return x1 === x2 || y1 === y2;\n  },\n  diagonal: from => to => {\n    const {\n      x: x1,\n      y: y1\n    } = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.toXY)(from);\n    const {\n      x: x2,\n      y: y2\n    } = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.toXY)(to);\n    return Math.abs(x2 - x1) === Math.abs(y2 - y1);\n  },\n  xByN: num => from => to => {\n    const {\n      x: x1\n    } = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.toXY)(from);\n    const {\n      x: x2\n    } = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.toXY)(to);\n    return Math.abs(x1 - x2) === num;\n  },\n  yByN: num => from => to => {\n    const {\n      y: y1\n    } = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.toXY)(from);\n    const {\n      y: y2\n    } = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.toXY)(to);\n    return Math.abs(y1 - y2) === num;\n  }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (moves);\n/* dealing with move vectors */\n\nfunction splitIntoVectors(arrayOfMoves, start) {\n  return arrayOfMoves.reduce((acc, curr) => {\n    const {\n      xDiff,\n      yDiff\n    } = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.calcDistance)(start)(curr);\n    let vector = '';\n    if (yDiff !== 0) vector = yDiff < 0 ? 'up' : 'down';\n    if (xDiff !== 0) vector += xDiff < 0 ? 'Right' : 'Left'; // normalize vector name\n\n    vector = vector.charAt(0).toLowerCase() + vector.slice(1);\n    acc[vector] = acc[vector] || [];\n    acc[vector].push(curr);\n    return acc;\n  }, {});\n}\n\nfunction getBeginningOfVector(vector) {\n  if (vector.length === 0) return '';\n  return vector.reduce((acc, curr) => {\n    const {\n      x: x1,\n      y: y1\n    } = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.toXY)(acc);\n    const {\n      x: x2,\n      y: y2\n    } = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.toXY)(curr);\n    const accIsBeginning = x1 === x2 ? y1 < y2 : x1 < x2;\n    return accIsBeginning ? acc : curr;\n  });\n}\n\nconst getMovesAlongVector = (s1, s2, allSquares) => {\n  const liesSameVertOrLat = moves.vertAndLateral(s1)(s2);\n  const liesSameDiagonally = moves.diagonal(s1)(s2);\n  const liesOnSameLine = liesSameVertOrLat || liesSameDiagonally;\n  if (!liesOnSameLine) return [];\n  const matchingVector = liesSameDiagonally ? 'diagonal' : 'vertAndLateral';\n  const squaresAlongVector = allSquares.filter(s => moves[matchingVector](s1)(s) && moves[matchingVector](s2)(s));\n  return squaresAlongVector;\n};\n/* sort moves */\n\n\nconst sortMovesClosestTo = square => moves => {\n  return [...moves].sort((a, b) => {\n    const {\n      xDiff: x1Diff,\n      yDiff: y1Diff\n    } = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.calcDistance)(square)(a);\n    const aDiff = Math.abs(x1Diff) + Math.abs(y1Diff);\n    const {\n      xDiff: x2Diff,\n      yDiff: y2Diff\n    } = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.calcDistance)(square)(b);\n    const bDiff = Math.abs(x2Diff) + Math.abs(y2Diff);\n    return aDiff - bDiff;\n  });\n};\n/* get moves */\n\n\nfunction getPossibleMoves(origin, board) {\n  // get all moves that can happen if no other pieces were on the board\n  const allSquares = Array.from(board.keys());\n  const square = board.get(origin);\n  const {\n    type,\n    color\n  } = square.piece;\n  const piece = (0,_Piece__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(color, type);\n  return allSquares.filter(s => piece.hasMove(origin, s));\n}\n\nfunction getLegalMoves(origin, board) {\n  // get moves regardless of whether or not there is check\n  const square = board.get(origin);\n  const piece = square.piece;\n  const possibleMoves = getPossibleMoves(origin, board);\n  const obstructions = possibleMoves.filter(s => {\n    var _a;\n\n    return (_a = board.get(s)) === null || _a === void 0 ? void 0 : _a.piece;\n  });\n\n  if (!obstructions.length) {\n    if (piece.type === 'pawn') return [...getPawnCaptures(origin, board), ...possibleMoves];\n    return possibleMoves;\n  }\n\n  let legalMoves = [];\n\n  switch (piece.type) {\n    case 'knight':\n      {\n        legalMoves = possibleMoves;\n        break;\n      }\n\n    case 'pawn':\n      {\n        const capturesAvailable = getPawnCaptures(origin, board);\n        const unobstructedMoves = removeMovesWithPieces(removeObstructedMoves(origin, possibleMoves, obstructions), board);\n        legalMoves = [...capturesAvailable, ...unobstructedMoves];\n        break;\n      }\n\n    case 'king':\n      {\n        legalMoves = removeProtectedSquares(piece, possibleMoves, board);\n        break;\n      }\n\n    default:\n      {\n        legalMoves = removeObstructedMoves(origin, possibleMoves, obstructions);\n      }\n  }\n\n  return removeMovesWithPieces(legalMoves, board, piece.color);\n}\n\nfunction getLegalMovesInCheck(origin, board, kingPos, squareGivingCheck) {\n  const squaresThatDealWithCheck = getSquaresBetweenKingAndCheck(kingPos, squareGivingCheck, Array.from(board.keys()));\n  const moves = getLegalMoves(origin, board);\n  return moves.filter(s => squaresThatDealWithCheck.includes(s));\n}\n\nfunction getAttackingMoves(origin, board) {\n  // for when you need to check for if squares are protected\n  const square = board.get(origin);\n  const {\n    type,\n    color\n  } = square.piece;\n\n  switch (type) {\n    case 'pawn':\n      {\n        const piece = (0,_Piece__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(color, 'pawn');\n        return piece.getPawnCaptures(origin);\n      }\n\n    default:\n      return getLegalMoves(origin, board);\n  }\n}\n\nfunction getAllMovesForColor(color, board) {\n  const allMoves = [];\n\n  for (const [square, {\n    piece\n  }] of board.entries()) {\n    if (!piece) continue;\n    if (piece.color !== color) continue;\n    allMoves.push(getLegalMoves(square, board));\n  }\n\n  return allMoves.flat();\n}\n\nfunction getAttackingMovesForColor(color, board) {\n  const allMoves = [];\n\n  for (const [square, {\n    piece\n  }] of board.entries()) {\n    if (!piece) continue;\n    if (piece.color !== color) continue;\n    allMoves.push(getAttackingMoves(square, board));\n  }\n\n  return allMoves.flat();\n}\n\nfunction getPawnCaptures(pawnSquare, board) {\n  var _a;\n\n  const {\n    color\n  } = (_a = board.get(pawnSquare)) === null || _a === void 0 ? void 0 : _a.piece;\n  const pawn = (0,_Piece__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(color, 'pawn');\n  const captureMoves = pawn.getPawnCaptures(pawnSquare);\n  if (!captureMoves) return [];\n  return captureMoves.filter(s => {\n    const squareVal = board.get(s);\n    if (!squareVal) return false;\n    const piece = squareVal.piece;\n    const enPassant = squareVal.enPassant;\n    return piece && piece.color !== pawn.color || enPassant && enPassant.color !== pawn.color;\n  });\n}\n\nfunction getSquaresBetweenKingAndCheck(kingPos, checkPos, allSquares) {\n  // includes kingPos and checkPos\n  const squaresAlongVector = getMovesAlongVector(kingPos, checkPos, allSquares);\n  const squaresBetweenKingAndPiece = removeMovesBehindTwoSquares(kingPos, checkPos, squaresAlongVector);\n  return squaresBetweenKingAndPiece;\n}\n/* filter moves */\n\n\nfunction removeMovesBehindTwoSquares(s1, s2, vector) {\n  const sorted = sortMovesClosestTo(getBeginningOfVector(vector))(vector);\n  let furthestSquare;\n  let closestSquare;\n\n  if (sorted.indexOf(s1) > sorted.indexOf(s2)) {\n    furthestSquare = s1;\n    closestSquare = s2;\n  } else {\n    furthestSquare = s2;\n    closestSquare = s1;\n  }\n\n  const removedOneEnd = removeMovesBehindSquare(furthestSquare)(sorted);\n  const removedBothEnds = removeMovesBehindSquare(closestSquare)(removedOneEnd.reverse());\n  return removedBothEnds;\n}\n\nconst removeMovesBehindSquare = square => moves => {\n  const copy = [...moves];\n  const index = moves.indexOf(square);\n  if (index === -1) return [];\n  copy.splice(index + 1);\n  return copy;\n};\n\nfunction removeObstructedMoves(startingSquare, possibleMoves, obstructions) {\n  // a) split possible moves into vectors (up,down,left,right, and/or diagonals)\n  // b) see which obstructions belong to which vector\n  // c) find the closest obstruction\n  // d) remove all the moves behind that obstruction\n  const filteredMoves = [];\n  const allVectors = splitIntoVectors(possibleMoves, startingSquare);\n  const obstructionVectors = splitIntoVectors(obstructions, startingSquare);\n\n  for (const vector in allVectors) {\n    if (!obstructionVectors[vector]) {\n      // look for vector obstruction is on\n      filteredMoves.push(allVectors[vector]);\n      continue;\n    }\n\n    const sorted = sortMovesClosestTo(startingSquare)(allVectors[vector]);\n    const closestObstruction = sortMovesClosestTo(startingSquare)(obstructionVectors[vector])[0];\n    filteredMoves.push(removeMovesBehindSquare(closestObstruction)(sorted));\n  }\n\n  return filteredMoves.flat();\n}\n\nfunction removeProtectedSquares(king, possibleMoves, board) {\n  // bc king cant move if square is protected\n  const oppColor = king.color === 'white' ? 'black' : 'white';\n  const allEnemyMoves = getAttackingMovesForColor(oppColor, board);\n  return possibleMoves.filter(s => {\n    return !allEnemyMoves.includes(s);\n  });\n}\n\nfunction removeMovesWithPieces(moves, board, color) {\n  return moves.filter(s => {\n    const squareVal = board.get(s);\n    if (!squareVal) return false;\n    if (color) return !squareVal.piece || squareVal.piece.color !== color;else return !squareVal.piece;\n  });\n}\n/* gameboard checks */\n\n\nfunction getDiscoveredCheck(kingPos, kingColor, vacated, board) {\n  var _a; // openSquare is a square just vacated\n\n\n  let squaresAlongVector = getMovesAlongVector(kingPos, vacated, Array.from(board.keys()));\n  squaresAlongVector = squaresAlongVector.filter(s => s !== kingPos && s !== vacated);\n  if (!squaresAlongVector.length) return '';\n\n  for (const square of squaresAlongVector) {\n    const piece = (_a = board.get(square)) === null || _a === void 0 ? void 0 : _a.piece;\n    if (!piece || piece.color === kingColor) continue;\n    const legalMoves = getLegalMoves(square, board);\n    if (legalMoves.includes(kingPos)) return square;\n  }\n\n  return '';\n}\n\nfunction canBlockOrCaptureCheck(kingPos, squareGivingCheck, board) {\n  var _a;\n\n  const king = (_a = board.get(kingPos)) === null || _a === void 0 ? void 0 : _a.piece;\n  const blockOrCaptureSquares = getSquaresBetweenKingAndCheck(kingPos, squareGivingCheck, Array.from(board.keys())); // also includes check square\n\n  const ownPieceMoves = getAllMovesForColor(king.color, board);\n  return ownPieceMoves.some(move => blockOrCaptureSquares.includes(move));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/moves.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});