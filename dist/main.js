!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F():"function"==typeof define&&define.amd?define([],F):"object"==typeof exports?exports.croChess=F():Q.croChess=F()}(this,(function(){return(()=>{"use strict";var __webpack_modules__={371:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Gameboard\": () => (/* reexport */ src_Gameboard),\n  \"History\": () => (/* reexport */ History)\n});\n\n;// CONCATENATED MODULE: ./src/utils/helpers.ts\nvar __read = undefined && undefined.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nfunction toXY(square) {\n  var _a = __read(square.split(''), 2),\n      x = _a[0],\n      y = _a[1];\n\n  return {\n    x: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'].indexOf(x.toLowerCase()),\n    y: Number(y)\n  };\n}\n\nfunction fromXY(coord) {\n  var x = coord.x,\n      y = coord.y;\n  var col = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'][x];\n  if (!col) return '';\n  return col.concat(y.toString());\n}\n\nvar calcDistance = function (squareOne) {\n  return function (squareTwo) {\n    var _a = toXY(squareOne),\n        x1 = _a.x,\n        y1 = _a.y;\n\n    var _b = toXY(squareTwo),\n        x2 = _b.x,\n        y2 = _b.y;\n\n    var xDiff = x1 - x2;\n    var yDiff = y1 - y2;\n    return {\n      xDiff: xDiff,\n      yDiff: yDiff\n    };\n  };\n};\n\n\n;// CONCATENATED MODULE: ./src/Piece.ts\n\n\n\nvar Piece = function (color, type) {\n  function hasMove(from, to) {\n    switch (type) {\n      case 'king':\n        {\n          var oneSquareVert = utils_moves.yByN(1)(from)(to) && utils_moves.xByN(0)(from)(to);\n          var oneSquareLateral = utils_moves.xByN(1)(from)(to) && utils_moves.yByN(0)(from)(to);\n          var oneSquareDiagonally = utils_moves.yByN(1)(from)(to) && utils_moves.xByN(1)(from)(to);\n          return from !== to && (oneSquareDiagonally || oneSquareVert || oneSquareLateral);\n        }\n\n      case 'queen':\n        {\n          return from !== to && (utils_moves.diagonal(from)(to) || utils_moves.vertAndLateral(from)(to));\n        }\n\n      case 'bishop':\n        {\n          return from !== to && utils_moves.diagonal(from)(to);\n        }\n\n      case 'knight':\n        {\n          return from !== to && (utils_moves.xByN(1)(from)(to) && utils_moves.yByN(2)(from)(to) || utils_moves.xByN(2)(from)(to) && utils_moves.yByN(1)(from)(to));\n        }\n\n      case 'rook':\n        {\n          return from !== to && utils_moves.vertAndLateral(to)(from);\n        }\n\n      case 'pawn':\n        {\n          var _a = toXY(from),\n              x1 = _a.x,\n              y1 = _a.y;\n\n          var _b = toXY(to),\n              x2 = _b.x,\n              y2 = _b.y;\n\n          var onlyMovesInFront = color === 'white' ? y1 < y2 : y1 > y2;\n          var regularMove = utils_moves.yByN(1)(from)(to) && x1 === x2;\n          var firstMove = color === 'white' ? y1 === 2 : y1 === 7;\n          var jumpTwo = utils_moves.yByN(2)(from)(to) && x1 === x2;\n          return from !== to && onlyMovesInFront && (regularMove || firstMove && jumpTwo);\n        }\n    }\n  }\n\n  function getPawnCaptures(origin) {\n    if (type !== 'pawn') return;\n\n    var _a = toXY(origin),\n        x = _a.x,\n        y = _a.y;\n\n    var newY = color === 'white' ? y + 1 : y - 1;\n    var captureOne = {\n      x: x + 1,\n      y: newY\n    };\n    var captureTwo = {\n      x: x - 1,\n      y: newY\n    };\n    return [fromXY(captureOne), fromXY(captureTwo)];\n  }\n\n  return {\n    hasMove: hasMove,\n    getPawnCaptures: getPawnCaptures,\n\n    get type() {\n      return type;\n    },\n\n    get color() {\n      return color;\n    }\n\n  };\n};\n\n/* harmony default export */ const src_Piece = (Piece);\n;// CONCATENATED MODULE: ./src/utils/moves.ts\nvar moves_read = undefined && undefined.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = undefined && undefined.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nvar __values = undefined && undefined.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\n\n\nvar moves = {\n  vertAndLateral: function (from) {\n    return function (to) {\n      var _a = moves_read(from.split(''), 2),\n          x1 = _a[0],\n          y1 = _a[1];\n\n      var _b = moves_read(to.split(''), 2),\n          x2 = _b[0],\n          y2 = _b[1];\n\n      return x1 === x2 || y1 === y2;\n    };\n  },\n  diagonal: function (from) {\n    return function (to) {\n      var _a = toXY(from),\n          x1 = _a.x,\n          y1 = _a.y;\n\n      var _b = toXY(to),\n          x2 = _b.x,\n          y2 = _b.y;\n\n      return Math.abs(x2 - x1) === Math.abs(y2 - y1);\n    };\n  },\n  xByN: function (num) {\n    return function (from) {\n      return function (to) {\n        var x1 = toXY(from).x;\n        var x2 = toXY(to).x;\n        return Math.abs(x1 - x2) === num;\n      };\n    };\n  },\n  yByN: function (num) {\n    return function (from) {\n      return function (to) {\n        var y1 = toXY(from).y;\n        var y2 = toXY(to).y;\n        return Math.abs(y1 - y2) === num;\n      };\n    };\n  }\n};\n/* harmony default export */ const utils_moves = (moves);\n/* dealing with move vectors */\n\nfunction splitIntoVectors(arrayOfMoves, start) {\n  return arrayOfMoves.reduce(function (acc, curr) {\n    var _a = calcDistance(start)(curr),\n        xDiff = _a.xDiff,\n        yDiff = _a.yDiff;\n\n    var vector = '';\n    if (yDiff !== 0) vector = yDiff < 0 ? 'up' : 'down';\n    if (xDiff !== 0) vector += xDiff < 0 ? 'Right' : 'Left'; // normalize vector name\n\n    vector = vector.charAt(0).toLowerCase() + vector.slice(1);\n    acc[vector] = acc[vector] || [];\n    acc[vector].push(curr);\n    return acc;\n  }, {});\n}\n\nfunction getBeginningOfVector(vector) {\n  if (vector.length === 0) return '';\n  return vector.reduce(function (acc, curr) {\n    var _a = toXY(acc),\n        x1 = _a.x,\n        y1 = _a.y;\n\n    var _b = toXY(curr),\n        x2 = _b.x,\n        y2 = _b.y;\n\n    var accIsBeginning = x1 === x2 ? y1 < y2 : x1 < x2;\n    return accIsBeginning ? acc : curr;\n  });\n}\n\nvar getMovesAlongVector = function (s1, s2, allSquares) {\n  var liesSameVertOrLat = moves.vertAndLateral(s1)(s2);\n  var liesSameDiagonally = moves.diagonal(s1)(s2);\n  var liesOnSameLine = liesSameVertOrLat || liesSameDiagonally;\n  if (!liesOnSameLine) return [];\n  var matchingVector = liesSameDiagonally ? 'diagonal' : 'vertAndLateral';\n  var squaresAlongVector = allSquares.filter(function (s) {\n    return moves[matchingVector](s1)(s) && moves[matchingVector](s2)(s);\n  });\n  return squaresAlongVector;\n};\n/* sort moves */\n\n\nvar sortMovesClosestTo = function (square) {\n  return function (moves) {\n    return __spreadArray([], moves_read(moves), false).sort(function (a, b) {\n      var _a = calcDistance(square)(a),\n          x1Diff = _a.xDiff,\n          y1Diff = _a.yDiff;\n\n      var aDiff = Math.abs(x1Diff) + Math.abs(y1Diff);\n\n      var _b = calcDistance(square)(b),\n          x2Diff = _b.xDiff,\n          y2Diff = _b.yDiff;\n\n      var bDiff = Math.abs(x2Diff) + Math.abs(y2Diff);\n      return aDiff - bDiff;\n    });\n  };\n};\n/* get moves */\n\n\nfunction getPossibleMoves(origin, board) {\n  // get all moves that can happen if no other pieces were on the board\n  var allSquares = Array.from(board.keys());\n  var square = board.get(origin);\n  var _a = square.piece,\n      type = _a.type,\n      color = _a.color;\n  var piece = src_Piece(color, type);\n  return allSquares.filter(function (s) {\n    return piece.hasMove(origin, s);\n  });\n}\n\nfunction getLegalMoves(origin, board) {\n  // get moves regardless of whether or not there is check\n  var square = board.get(origin);\n  var piece = square.piece;\n  var possibleMoves = getPossibleMoves(origin, board);\n  var obstructions = possibleMoves.filter(function (s) {\n    var _a;\n\n    return (_a = board.get(s)) === null || _a === void 0 ? void 0 : _a.piece;\n  });\n\n  if (!obstructions.length) {\n    if (piece.type === 'pawn') return __spreadArray(__spreadArray([], moves_read(getPawnCaptures(origin, board)), false), moves_read(possibleMoves), false);\n    return possibleMoves;\n  }\n\n  var legalMoves = [];\n\n  switch (piece.type) {\n    case 'knight':\n      {\n        legalMoves = possibleMoves;\n        break;\n      }\n\n    case 'pawn':\n      {\n        var capturesAvailable = getPawnCaptures(origin, board);\n        var unobstructedMoves = removeMovesWithPieces(removeObstructedMoves(origin, possibleMoves, obstructions), board);\n        legalMoves = __spreadArray(__spreadArray([], moves_read(capturesAvailable), false), moves_read(unobstructedMoves), false);\n        break;\n      }\n\n    case 'king':\n      {\n        legalMoves = removeProtectedSquares(piece, possibleMoves, board);\n        break;\n      }\n\n    default:\n      {\n        legalMoves = removeObstructedMoves(origin, possibleMoves, obstructions);\n      }\n  }\n\n  return removeMovesWithPieces(legalMoves, board, piece.color);\n}\n\nfunction getLegalMovesInCheck(origin, board, kingPos, squareGivingCheck) {\n  var squaresThatDealWithCheck = getSquaresBetweenKingAndCheck(kingPos, squareGivingCheck, Array.from(board.keys()));\n  var moves = getLegalMoves(origin, board);\n  return moves.filter(function (s) {\n    return squaresThatDealWithCheck.includes(s);\n  });\n}\n\nfunction getAttackingMoves(origin, board) {\n  // for when you need to check for if squares are protected\n  var square = board.get(origin);\n  var _a = square.piece,\n      type = _a.type,\n      color = _a.color;\n\n  switch (type) {\n    case 'pawn':\n      {\n        var piece = src_Piece(color, 'pawn');\n        return piece.getPawnCaptures(origin);\n      }\n\n    default:\n      return getLegalMoves(origin, board);\n  }\n}\n\nfunction getAllMovesForColor(color, board) {\n  var e_1, _a;\n\n  var allMoves = [];\n\n  try {\n    for (var _b = __values(board.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var _d = moves_read(_c.value, 2),\n          square = _d[0],\n          piece = _d[1].piece;\n\n      if (!piece) continue;\n      if (piece.color !== color) continue;\n      allMoves.push(getLegalMoves(square, board));\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return allMoves.flat();\n}\n\nfunction getAttackingMovesForColor(color, board) {\n  var e_2, _a;\n\n  var allMoves = [];\n\n  try {\n    for (var _b = __values(board.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var _d = moves_read(_c.value, 2),\n          square = _d[0],\n          piece = _d[1].piece;\n\n      if (!piece) continue;\n      if (piece.color !== color) continue;\n      allMoves.push(getAttackingMoves(square, board));\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n\n  return allMoves.flat();\n}\n\nfunction getPawnCaptures(pawnSquare, board) {\n  var _a;\n\n  var color = ((_a = board.get(pawnSquare)) === null || _a === void 0 ? void 0 : _a.piece).color;\n  var pawn = src_Piece(color, 'pawn');\n  var captureMoves = pawn.getPawnCaptures(pawnSquare);\n  if (!captureMoves) return [];\n  return captureMoves.filter(function (s) {\n    var squareVal = board.get(s);\n    if (!squareVal) return false;\n    var piece = squareVal.piece;\n    var enPassant = squareVal.enPassant;\n    return piece && piece.color !== pawn.color || enPassant && enPassant.color !== pawn.color;\n  });\n}\n\nfunction getSquaresBetweenKingAndCheck(kingPos, checkPos, allSquares) {\n  // includes kingPos and checkPos\n  var squaresAlongVector = getMovesAlongVector(kingPos, checkPos, allSquares);\n  var squaresBetweenKingAndPiece = removeMovesBehindTwoSquares(kingPos, checkPos, squaresAlongVector);\n  return squaresBetweenKingAndPiece;\n}\n/* filter moves */\n\n\nfunction removeMovesBehindTwoSquares(s1, s2, vector) {\n  var sorted = sortMovesClosestTo(getBeginningOfVector(vector))(vector);\n  var furthestSquare;\n  var closestSquare;\n\n  if (sorted.indexOf(s1) > sorted.indexOf(s2)) {\n    furthestSquare = s1;\n    closestSquare = s2;\n  } else {\n    furthestSquare = s2;\n    closestSquare = s1;\n  }\n\n  var removedOneEnd = removeMovesBehindSquare(furthestSquare)(sorted);\n  var removedBothEnds = removeMovesBehindSquare(closestSquare)(removedOneEnd.reverse());\n  return removedBothEnds;\n}\n\nvar removeMovesBehindSquare = function (square) {\n  return function (moves) {\n    var copy = __spreadArray([], moves_read(moves), false);\n\n    var index = moves.indexOf(square);\n    if (index === -1) return [];\n    copy.splice(index + 1);\n    return copy;\n  };\n};\n\nfunction removeObstructedMoves(startingSquare, possibleMoves, obstructions) {\n  // a) split possible moves into vectors (up,down,left,right, and/or diagonals)\n  // b) see which obstructions belong to which vector\n  // c) find the closest obstruction\n  // d) remove all the moves behind that obstruction\n  var filteredMoves = [];\n  var allVectors = splitIntoVectors(possibleMoves, startingSquare);\n  var obstructionVectors = splitIntoVectors(obstructions, startingSquare);\n\n  for (var vector in allVectors) {\n    if (!obstructionVectors[vector]) {\n      // look for vector obstruction is on\n      filteredMoves.push(allVectors[vector]);\n      continue;\n    }\n\n    var sorted = sortMovesClosestTo(startingSquare)(allVectors[vector]);\n    var closestObstruction = sortMovesClosestTo(startingSquare)(obstructionVectors[vector])[0];\n    filteredMoves.push(removeMovesBehindSquare(closestObstruction)(sorted));\n  }\n\n  return filteredMoves.flat();\n}\n\nfunction removeProtectedSquares(king, possibleMoves, board) {\n  // bc king cant move if square is protected\n  var oppColor = king.color === 'white' ? 'black' : 'white';\n  var allEnemyMoves = getAttackingMovesForColor(oppColor, board);\n  return possibleMoves.filter(function (s) {\n    return !allEnemyMoves.includes(s);\n  });\n}\n\nfunction removeMovesWithPieces(moves, board, color) {\n  return moves.filter(function (s) {\n    var squareVal = board.get(s);\n    if (!squareVal) return false;\n    if (color) return !squareVal.piece || squareVal.piece.color !== color;else return !squareVal.piece;\n  });\n}\n/* gameboard checks */\n\n\nfunction getDiscoveredCheck(kingPos, kingColor, vacated, board) {\n  var e_3, _a;\n\n  var _b; // openSquare is a square just vacated\n\n\n  var squaresAlongVector = getMovesAlongVector(kingPos, vacated, Array.from(board.keys()));\n  squaresAlongVector = squaresAlongVector.filter(function (s) {\n    return s !== kingPos && s !== vacated;\n  });\n  if (!squaresAlongVector.length) return '';\n\n  try {\n    for (var squaresAlongVector_1 = __values(squaresAlongVector), squaresAlongVector_1_1 = squaresAlongVector_1.next(); !squaresAlongVector_1_1.done; squaresAlongVector_1_1 = squaresAlongVector_1.next()) {\n      var square = squaresAlongVector_1_1.value;\n      var piece = (_b = board.get(square)) === null || _b === void 0 ? void 0 : _b.piece;\n      if (!piece || piece.color === kingColor) continue;\n      var legalMoves = getLegalMoves(square, board);\n      if (legalMoves.includes(kingPos)) return square;\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (squaresAlongVector_1_1 && !squaresAlongVector_1_1.done && (_a = squaresAlongVector_1.return)) _a.call(squaresAlongVector_1);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n\n  return '';\n}\n\nfunction canBlockOrCaptureCheck(kingPos, squareGivingCheck, board) {\n  var _a;\n\n  var king = (_a = board.get(kingPos)) === null || _a === void 0 ? void 0 : _a.piece;\n  var blockOrCaptureSquares = getSquaresBetweenKingAndCheck(kingPos, squareGivingCheck, Array.from(board.keys())); // also includes check square\n\n  var ownPieceMoves = getAllMovesForColor(king.color, board);\n  return ownPieceMoves.some(function (move) {\n    return blockOrCaptureSquares.includes(move);\n  });\n}\n\n\n;// CONCATENATED MODULE: ./src/Gameboard.ts\nvar __assign = undefined && undefined.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar Gameboard_values = undefined && undefined.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar Gameboard_read = undefined && undefined.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar Gameboard_spreadArray = undefined && undefined.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\n\n\nvar Gameboard = function (board, squaresGivingCheck) {\n  board = board || createBoard();\n\n  function createBoard() {\n    var files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n    var ranks = [1, 2, 3, 4, 5, 6, 7, 8];\n    return files.reduce(function (acc, file) {\n      ranks.forEach(function (rank) {\n        var square = file.concat(rank.toString());\n        acc.set(square, {\n          piece: null\n        });\n      });\n      return acc;\n    }, new Map());\n  }\n\n  function canCastle(color, side) {\n    var rank = color === 'white' ? 1 : 8;\n    var castleSquares = side === 'kingside' ? [\"f\".concat(rank), \"g\".concat(rank)] : [\"c\".concat(rank), \"d\".concat(rank)];\n    var oppColor = color === 'white' ? 'black' : 'white';\n    var oppMoves = getAttackingMovesForColor(oppColor, board);\n    var canCastle = true;\n    castleSquares.forEach(function (s) {\n      // check if castle square is cleared\n      if (at(s).piece) canCastle = false; // make sure castle square isnt attacked\n\n      if (oppMoves.includes(s)) {\n        canCastle = false;\n      }\n    });\n    return canCastle;\n  }\n\n  function castle(color, side) {\n    var rank = color === 'white' ? 1 : 8;\n    var castleSquares = side === 'kingside' ? [\"f\".concat(rank), \"g\".concat(rank)] : [\"d\".concat(rank), \"c\".concat(rank)];\n    var kingPos = get.kingPosition(color);\n    var rookPos = getRookPos();\n    from(rookPos).to(castleSquares[0]);\n    from(kingPos).to(castleSquares[1]);\n\n    function getRookPos() {\n      var pieceMap = get.pieceMap();\n      var rookPos = pieceMap[color].rook.find(function (square) {\n        var file = square.split('')[0];\n        return side === 'kingside' ? ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'].indexOf(file) > 3 : ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'].indexOf(file) < 3;\n      });\n      return rookPos;\n    } // need to get king position\n    // need to get castle squares\n    // need to find rook\n\n  }\n\n  var enPassant = function () {\n    function getSquare(current, color) {\n      var _a = toXY(current),\n          x = _a.x,\n          y = _a.y;\n\n      var newY = color === 'white' ? y - 1 : y + 1;\n      return fromXY({\n        x: x,\n        y: newY\n      });\n    }\n\n    return {\n      checkToggle: function (from, to) {\n        var y1 = toXY(from).y;\n        var y2 = toXY(to).y;\n        return Math.abs(y1 - y2) === 2;\n      },\n      toggle: function (current, color) {\n        var enPassantSquare = getSquare(current, color);\n        at(enPassantSquare).setEnPassant(color, current);\n      },\n      remove: function () {\n        var e_1, _a;\n\n        try {\n          for (var _b = Gameboard_values(board.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var squareObj = _c.value;\n            if (squareObj.enPassant) return squareObj.enPassant = undefined;\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n    };\n  }();\n\n  var at = function (square) {\n    return {\n      place: function (piece) {\n        if (!board.get(square)) return 'square does not exist';\n        board.set(square, {\n          piece: piece\n        });\n      },\n      remove: function () {\n        if (!board.get(square)) return 'square does not exist';\n        board.set(square, {\n          piece: null\n        });\n      },\n      promote: function (pieceType) {\n        var squareVal = board.get(square);\n        var piece = squareVal === null || squareVal === void 0 ? void 0 : squareVal.piece;\n        if (!piece) return;\n        board.set(square, __assign(__assign({}, squareVal), {\n          piece: __assign(__assign({}, piece), {\n            type: pieceType\n          })\n        }));\n      },\n      setEnPassant: function (color, current) {\n        if (!board.get(square)) return 'square does not exist';\n        board.set(square, {\n          piece: null,\n          enPassant: {\n            current: current,\n            color: color\n          }\n        });\n      },\n\n      get piece() {\n        var _a;\n\n        return (_a = board.get(square)) === null || _a === void 0 ? void 0 : _a.piece;\n      },\n\n      getLegalMoves: function () {\n        squaresGivingCheck = squaresGivingCheck || [];\n        var _a = at(square).piece,\n            type = _a.type,\n            color = _a.color;\n\n        switch (squaresGivingCheck.length) {\n          case 2:\n            {\n              if (type !== 'king') return [];\n              return getLegalMoves(square, board);\n            }\n\n          case 1:\n            {\n              return getLegalMovesInCheck(origin, board, get.kingPosition(color), squaresGivingCheck[0]);\n            }\n\n          case 0:\n            {\n              return getLegalMoves(square, board);\n            }\n        }\n      }\n    };\n  };\n\n  var from = function (s1) {\n    return {\n      to: function (s2) {\n        var piece = at(s1).piece;\n        if (!piece) return; // move piece\n\n        at(s1).remove();\n        at(s2).place(piece);\n      }\n    };\n  };\n\n  var get = {\n    kingPosition: function (color) {\n      var e_2, _a;\n\n      try {\n        for (var _b = Gameboard_values(board.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var _d = Gameboard_read(_c.value, 2),\n              square = _d[0],\n              value = _d[1];\n\n          if (value.piece && value.piece.type === 'king' && value.piece.color === color) return square;\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    },\n    pieceMap: function () {\n      var e_3, _a;\n\n      var pieceMap = {\n        white: {},\n        black: {}\n      };\n\n      try {\n        for (var _b = Gameboard_values(board.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var _d = Gameboard_read(_c.value, 2),\n              square = _d[0],\n              value = _d[1];\n\n          var piece = value.piece;\n          if (!piece) continue;\n          var type = piece.type,\n              color = piece.color;\n          pieceMap[color][type] = pieceMap[color][type] ? Gameboard_spreadArray(Gameboard_spreadArray([], Gameboard_read(pieceMap[color][type]), false), [square], false) : [square];\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n\n      return pieceMap;\n    },\n    piecePositions: function (color) {\n      var e_4, _a;\n\n      var piecePositions = [];\n\n      try {\n        for (var _b = Gameboard_values(board.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var _d = Gameboard_read(_c.value, 2),\n              square = _d[0],\n              value = _d[1];\n\n          if (value.piece && value.piece.color === color) piecePositions.push(square);\n        }\n      } catch (e_4_1) {\n        e_4 = {\n          error: e_4_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_4) throw e_4.error;\n        }\n      }\n\n      return piecePositions;\n    },\n    squaresGivingCheckAfterMove: function (from, end) {\n      var _a;\n\n      var squaresGivingCheck = [];\n      var piece = (_a = board.get(end)) === null || _a === void 0 ? void 0 : _a.piece;\n      var oppColor = piece.color === 'white' ? 'black' : 'white';\n      var kingPosition = get.kingPosition(oppColor);\n      var pieceHitsKing = getLegalMoves(end, board).includes(kingPosition);\n      if (pieceHitsKing) squaresGivingCheck.push(end);\n      var discoveredCheck = getDiscoveredCheck(kingPosition, oppColor, from, board);\n      if (discoveredCheck) squaresGivingCheck.push(discoveredCheck);\n      return squaresGivingCheck;\n    },\n    isCheckmate: function (color, squaresGivingCheck) {\n      var kingPos = get.kingPosition(color);\n      var legalMoves = at(kingPos).getLegalMoves(); // check if check can be blocked\n\n      if (squaresGivingCheck.length === 1) {\n        if (canBlockOrCaptureCheck(kingPos, squaresGivingCheck[0], board)) return false;\n      }\n\n      if (!legalMoves || !legalMoves.length) return true;\n      return false;\n    }\n  };\n  return {\n    createBoard: createBoard,\n    castle: castle,\n    canCastle: canCastle,\n    enPassant: enPassant,\n    at: at,\n    from: from,\n    get: get,\n\n    get board() {\n      return board;\n    }\n\n  };\n};\n\n/* harmony default export */ const src_Gameboard = (Gameboard);\n;// CONCATENATED MODULE: ./src/History.ts\n// should output history object that holds move history in 2d array\n// for each move needs to attach piece Type to beginning of move if not pawn\n// should further specify square of piece if, say both rooks, can move to same square\nvar History_read = undefined && undefined.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\n\nfunction History(prevHistory, board, pieceMap) {\n  var history = prevHistory || [];\n  var get = {\n    piecePrefix: function (from, to) {\n      var _a;\n\n      var _b = (_a = board.get(to)) === null || _a === void 0 ? void 0 : _a.piece,\n          type = _b.type,\n          color = _b.color;\n\n      switch (type) {\n        case 'pawn':\n          return '';\n\n        case 'knight':\n        case 'rook':\n          {\n            var prefix_1 = type === 'rook' ? 'R' : 'N';\n\n            if (pieceMap[color][type].length !== 1) {\n              // look for piece of same type that couldve also went to the square\n              pieceMap[color][type].forEach(function (s) {\n                if (s === to) return;\n                var boardCopy = new Map(board);\n                boardCopy.set(to, {\n                  piece: null\n                });\n\n                if (getLegalMoves(s, boardCopy).includes(to)) {\n                  var _a = History_read(from.split(''), 2),\n                      x1 = _a[0],\n                      y1 = _a[1];\n\n                  var _b = History_read(s.split(''), 1),\n                      x2 = _b[0];\n\n                  var sameFile = x1 === x2;\n                  prefix_1 = sameFile ? prefix_1 + y1 : prefix_1 + x1;\n                }\n              });\n            }\n\n            return prefix_1;\n          }\n\n        default:\n          {\n            var prefix = type.charAt(0).toUpperCase();\n            return prefix;\n          }\n      }\n    },\n    castleNotation: function (side) {\n      return side === 'kingside' ? 'O-O' : 'O-O-O';\n    }\n  };\n  var affix = {\n    capture: function (move, prefix) {\n      return \"\".concat(prefix, \"x\").concat(move);\n    },\n    promote: function (move, pieceType) {\n      var suffix = pieceType === 'knight' ? 'N' : pieceType.charAt(0).toUpperCase();\n      return \"\".concat(move, \"=\").concat(suffix);\n    },\n    check: function (notation) {\n      return \"\".concat(notation, \"+\");\n    },\n    checkmate: function (notation) {\n      return \"\".concat(notation, \"#\");\n    }\n  };\n  return {\n    get: get,\n    affix: affix,\n    insertMove: function (notation) {\n      var lastMovePair = history[history.length - 1];\n\n      if (lastMovePair.length === 1) {\n        lastMovePair.push(notation);\n      } else {\n        var newMovePair = [notation];\n        history.push(newMovePair);\n      }\n    }\n  };\n}\n;// CONCATENATED MODULE: ./src/main.ts\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///371\n")}},__webpack_require__={d:(Q,F)=>{for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},o:(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),r:Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})}},__webpack_exports__={};return __webpack_modules__[371](0,__webpack_exports__,__webpack_require__),__webpack_exports__})()}));